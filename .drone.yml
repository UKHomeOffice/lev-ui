---
kind: pipeline
type: kubernetes
name: default

platform:
  os: linux
  arch: amd64

steps:
- name: tests
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  environment:
    DOCKER_HOST: tcp://127.0.0.1:2375
  commands:
    - sleep 20
    - docker-compose -f docker-compose-local.yml up --exit-code-from acceptance
  when:
    branch:
      - master
    event:
      - pull_request
      - push

- name: build
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
  - npm ci
  - npm run test
  when:
    branch:
    - master
    event:
    - pull_request

- name: push_to_quay
  image: plugins/docker
  settings:
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/lev-web-ui
    tags:
      - "1.0.0-${DRONE_BUILD_NUMBER}-${DRONE_COMMIT:0:10}"
      - "1.0.0"
      - "1.0"
  environment:
    DOCKER_PASSWORD:
      from_secret: QUAY_PASSWORD
    DOCKER_USERNAME: ukhomeofficedigital+lev_web_ui
  when:
    branch:
      - master
    event:
      - push

- name: deploy_image_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/lev-ci
  commands:
    - source get-package-details
    - kubectl="kubectl --insecure-skip-tls-verify --server=$${KUBE_SERVER} --namespace=$${KUBE_NAMESPACE} --token=$${KUBE_TOKEN}"
    - $${kubectl} set image deployment/$${KUBE_DEPLOYMENT} "$${KUBE_CONTAINER}=quay.io/ukhomeofficedigital/lev-web-ui:$${FULL_VERSION}"
    - $${kubectl} rollout status deployment/$${KUBE_DEPLOYMENT}
  environment:
    KUBE_CONTAINER:
      from_secret: KUBE_CONTAINER
    KUBE_DEPLOYMENT:
      from_secret: KUBE_DEPLOYMENT
    KUBE_NAMESPACE:
      from_secret: KUBE_NAMESPACE
    KUBE_SERVER:
      from_secret: KUBE_SERVER
    KUBE_TOKEN:
      from_secret: KUBE_TOKEN
  when:
    branch:
      - master
    event:
      - push

- name: notify_slack_success
  pull: if-not-exists
  image: plugins/slack
  settings:
    channel: general
    template: "*Deployed {{repo.name}} to Dev* - <{{build.link}}|#{{build.number}}>\n"
    username: Drone
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    branch:
      - master
    event:
      - push
    status:
      - success

- name: notify_slack_failure
  pull: if-not-exists
  image: plugins/slack
  settings:
    channel: alerts
    template: "*Failed to deploy {{repo.name}} to Dev*\nAuthor: {{build.author}}\nDuration: {{since job.started}} Job: <{{build.link}}|#{{build.number}}>\nCommit: {{build.commit}}\n"
    username: Drone
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    branch:
      - master
    event:
      - push
    status:
      - failure

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
